#!/bin/sh
# -*- tab-width:4;indent-tabs-mode:nil -*-
# ex: ts=4 sw=4 et

read -r -d '' VAR <<'EOF'
-module(emqx_dump).

-export([export/1]).

export(Dir) ->
    Version = string:sub_string(emqx_sys:version(), 1, 3),
    Rules = export_rules(),
    Resources = export_resources(),
    Blacklist = export_blacklist(Version),
    Apps = export_applications(),
    Users = export_users(),
    Filename = filename:join([Dir, "emqx-export.json"]),
    Data = [{version, erlang:list_to_binary(Version)},
            {date, iolist_to_binary(datetime())},
            {rules, Rules},
            {resources, Resources},
            {blacklist, Blacklist},
            {apps, Apps},
            {users, Users}],
    Data2 = case ets:info(emqx_schema) of
        undefined -> Data;
        _ ->
            Data ++ [{schemas, export_schemas()}]
    end,
    case file:write_file(Filename, emqx_json:encode(Data2)) of
        ok ->
            io:format("The emqx data has been successfully exported to ~s.~n", [Filename]);
        {error, Reason} ->
            io:format("The emqx data export failed due to ~p.~n", [Reason])
    end.

export_rules() ->
    lists:foldl(fun({_, RuleId, _, RawSQL, _, _, _, _, _, Actions, Enabled, Desc}, Acc) ->
                    NActions = [[{id, ActionInstId},
                                {name, Name},
                                {args, Args}] || {action_instance, ActionInstId, Name, Args} <- Actions],
                    [[{id, RuleId},
                      {rawsql, RawSQL},
                      {actions, NActions},
                      {enabled, Enabled},
                      {description, Desc}] | Acc]
            end, [], emqx_rule_registry:get_rules()).

export_resources() ->
    lists:foldl(fun({_, Id, Type, Config, CreatedAt, Desc}, Acc) ->
                    NCreatedAt = case CreatedAt of
                                    undefined -> null;
                                    _ -> CreatedAt
                                end,
                    [[{id, Id},
                    {type, Type},
                    {config, maps:to_list(Config)},
                    {created_at, NCreatedAt},
                    {description, Desc}] | Acc]
            end, [], emqx_rule_registry:get_resources()).

export_blacklist("4.0") ->
    lists:foldl(fun({_, Who, By, Reason, At, Until}, Acc) ->
        [banned(Who, By, Reason, At, Until) | Acc]
    end, [], ets:tab2list(emqx_banned));

export_blacklist(_) ->
    lists:foldl(fun({_, Who, Reason, By, At, Until}, Acc) ->
        [banned(Who, By, Reason, At, Until) | Acc]
    end, [], ets:tab2list(emqx_banned)).

banned(Who, By, Reason, At, Until) ->
    NWho = case Who of
        {peerhost, Peerhost} -> {peerhost, inet:ntoa(Peerhost)};
        _ -> Who
    end,
    [{who, [NWho]}, {by, By}, {reason, Reason}, {at, At}, {until, Until}].

export_applications() ->
    lists:foldl(fun({_, AppID, AppSecret, Name, Desc, Status, Expired}, Acc) ->
                    [[{id, AppID}, {secret, AppSecret}, {name, Name}, {desc, Desc}, {status, Status}, {expired, Expired}] | Acc]
                end, [], ets:tab2list(mqtt_app)).

export_users() ->
    lists:foldl(fun({_, Username, Password, Tags}, Acc) ->
                    [[{username, Username}, {password, base64:encode(Password)}, {tags, Tags}] | Acc]
                end, [], ets:tab2list(mqtt_admin)).

export_schemas() ->
    lists:foldl(fun({schema, Name, SchemaBin, ParserType, ParserAddr, ParserOpts, Descr}, Acc) ->
        [[{name, Name},
        {schema, SchemaBin},
        {parser_type, ParserType},
        {parser_addr, format_parser_addr(ParserAddr)},
        {parser_opts, ParserOpts},
        {descr, Descr}] | Acc]
    end, [], emqx_schema_registry:get_all_schemas()).


format_parser_addr(undefined) ->
    null;
format_parser_addr({resource_id, ResId}) ->
    #{<<"resource_id">> => ResId};
format_parser_addr({http, Url}) ->
    #{<<"url">> => bin(Url)};
format_parser_addr({tcp, Host, Port}) ->
    #{<<"host">> => bin(inet:ntoa(Host)), <<"port">> => Port}.

bin(Str) when is_list(Str) -> list_to_binary(Str);
bin(Bin) when is_binary(Bin) -> Bin.

datetime() ->
    {{Y,M,D}, {H,MM,S}} = calendar:system_time_to_local_time(erlang:system_time(second), second),
    lists:flatten(
        io_lib:format(
            "~4..0w-~2..0w-~2..0w ~2..0w:~2..0w:~2..0w", [Y, M, D, H, MM, S])).


EOF

dumpfile="MakeDumpFile = fun(File) ->

        IsNotDot = fun ({dot,_}) -> false;
                        (_)       -> true
                   end,

        SplitToks = fun Split_toks_at_dot(AllToks) ->
                        case lists:splitwith(IsNotDot, AllToks) of
                            {Toks, [{dot,_}=Dot]}      -> [Toks ++ [Dot]];
                            {Toks, [{dot,_}=Dot | Tl]} -> [Toks ++ [Dot] | Split_toks_at_dot(Tl)]
                        end
                    end,

        {ok, Toks, _EndLine} = erl_scan:string(File),
        FormToks = SplitToks(Toks),
        Forms = [case erl_parse:parse_form(Ts) of
                     {ok, Form} ->
                         Form;
                     {error, Reason} ->
                         erlang:error({erl_parse_failed, Reason})
                 end
                 || Ts <- FormToks],
        compile:noenv_forms(Forms, [binary])
    end."

pipefile="`ps -ef | grep run_erl | grep -o -E '\-daemon (\S*)' | awk '{print $2}'`erlang.pipe.1.w"

echo "f()." > $pipefile
echo "${dumpfile}" > $pipefile
echo Code="\""${VAR//\"/\\\"}"\"". > $pipefile
echo "{ok, Mod, BinaryCode} = MakeDumpFile(Code)." > $pipefile
echo "code:load_binary(Mod, \"emqx_dump.erl\", BinaryCode)." > $pipefile
echo "f()." > $pipefile

case "$1" in
    export)
        echo "$2"
        echo "emqx_dump:export(\"$2\")." > $pipefile
        echo "The emqx data has been successfully exported to $2/emqx-export.json"
        ;;
    import)
        echo "$2"
        echo "emqx_dump:import(\"$2\")." > $pipefile
        echo "The emqx data has been imported successfully."
        ;;
    *)
    echo "Usage: export|import}"
    exit 1
    ;;
esac
