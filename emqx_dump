#!/bin/sh
# -*- tab-width:4;indent-tabs-mode:nil -*-
# ex: ts=4 sw=4 et

VAR="
-module(emqx_dump).

-export([export/1]).

export(Dir) ->
    Version = string:sub_string(emqx_sys:version(), 1, 3),
    Rules = export_rules(),
    Resources = export_resources(),
    Blacklist = export_blacklist(Version),
    Apps = export_applications(),
    Users = export_users(),
    Schemas = export_schemas(),
    AuthClientid = export_auth_clientid(),
    AuthUsername = export_auth_username(),
    AuthMnesia = export_auth_mnesia(),
    AclMnesia = export_acl_mnesia(),
    Filename = filename:join([Dir, \"emqx-export.json\"]),
    Data = [{version, erlang:list_to_binary(Version)},
            {date, iolist_to_binary(datetime())},
            {rules, Rules},
            {resources, Resources},
            {blacklist, Blacklist},
            {apps, Apps},
            {users, Users},
            {auth_clientid, AuthClientid},
            {auth_username, AuthUsername},
            {auth_mnesia, AuthMnesia},
            {acl_mnesia, AclMnesia},
            {schemas, Schemas}],
    file:write_file(Filename, emqx_json:encode(Data)).

export_rules() ->
    lists:foldl(fun({_, RuleId, _, RawSQL, _, _, _, _, _, Actions, Enabled, Desc}, Acc) ->
                    NActions = [[{id, ActionInstId},
                                {name, Name},
                                {args, Args}] || {action_instance, ActionInstId, Name, Args} <- Actions],
                    [[{id, RuleId},
                      {rawsql, RawSQL},
                      {actions, NActions},
                      {enabled, Enabled},
                      {description, Desc}] | Acc]
            end, [], emqx_rule_registry:get_rules()).

export_resources() ->
    lists:foldl(fun({_, Id, Type, Config, CreatedAt, Desc}, Acc) ->
                    NCreatedAt = case CreatedAt of
                                    undefined -> null;
                                    _ -> CreatedAt
                                end,
                    [[{id, Id},
                    {type, Type},
                    {config, maps:to_list(Config)},
                    {created_at, NCreatedAt},
                    {description, Desc}] | Acc]
            end, [], emqx_rule_registry:get_resources()).

export_blacklist(\"4.0\") ->
    lists:foldl(fun({_, Who, By, Reason, At, Until}, Acc) ->
        [banned(Who, By, Reason, At, Until) | Acc]
    end, [], ets:tab2list(emqx_banned));

export_blacklist(_) ->
    lists:foldl(fun({_, Who, Reason, By, At, Until}, Acc) ->
        [banned(Who, By, Reason, At, Until) | Acc]
    end, [], ets:tab2list(emqx_banned)).

banned(Who, By, Reason, At, Until) ->
    NWho = case Who of
        {peerhost, Peerhost} -> {peerhost, inet:ntoa(Peerhost)};
        _ -> Who
    end,
    [{who, [NWho]}, {by, By}, {reason, Reason}, {at, At}, {until, Until}].

export_applications() ->
    lists:foldl(fun({_, AppID, AppSecret, Name, Desc, Status, Expired}, Acc) ->
                    [[{id, AppID}, {secret, AppSecret}, {name, Name}, {desc, Desc}, {status, Status}, {expired, Expired}] | Acc]
                end, [], ets:tab2list(mqtt_app)).

export_users() ->
    lists:foldl(fun({_, Username, Password, Tags}, Acc) ->
                    [[{username, Username}, {password, base64:encode(Password)}, {tags, Tags}] | Acc]
                end, [], ets:tab2list(mqtt_admin)).

export_auth_clientid() ->
    case ets:info(emqx_auth_clientid) of
        undefined -> [];
        _ ->
            lists:foldl(fun({_, ClientId, Password}, Acc) ->
                            [[{clientid, ClientId}, {password, Password}] | Acc]
                        end, [], ets:tab2list(emqx_auth_clientid))
    end.

export_auth_username() ->
    case ets:info(emqx_auth_username) of
        undefined -> [];
        _ ->
            lists:foldl(fun({_, Username, Password}, Acc) ->
                            [[{username, Username}, {password, Password}] | Acc]
                        end, [], ets:tab2list(emqx_auth_username))
    end.

export_auth_mnesia() ->
    case ets:info(emqx_user) of
        undefined -> [];
        _ ->
            lists:foldl(fun({_, Login, Password, IsSuperuser}, Acc) ->
                            [[{login, Login}, {password, Password}, {is_superuser, IsSuperuser}] | Acc]
                        end, [], ets:tab2list(emqx_user))
    end.

export_acl_mnesia() ->
    case ets:info(emqx_user) of
        undefined -> [];
        _ ->
            lists:foldl(fun({_, Login, Topic, Action, Allow}, Acc) ->
                            [[{login, Login}, {topic, Topic}, {action, Action}, {allow, Allow}] | Acc]
                        end, [], ets:tab2list(emqx_acl))
    end.

export_schemas() ->
    case ets:info(emqx_schema) of
        undefined -> [];
        _ ->
            lists:foldl(fun({schema, Name, SchemaBin, ParserType, ParserAddr, ParserOpts, Descr}, Acc) ->
                [[{name, Name},
                {schema, SchemaBin},
                {parser_type, ParserType},
                {parser_addr, format_parser_addr(ParserAddr)},
                {parser_opts, ParserOpts},
                {descr, Descr}] | Acc]
            end, [], emqx_schema_registry:get_all_schemas())
    end.


format_parser_addr(undefined) ->
    null;
format_parser_addr({resource_id, ResId}) ->
    #{<<\"resource_id\">> => ResId};
format_parser_addr({http, Url}) ->
    #{<<\"url\">> => bin(Url)};
format_parser_addr({tcp, Host, Port}) ->
    #{<<\"host\">> => bin(inet:ntoa(Host)), <<\"port\">> => Port}.

bin(Str) when is_list(Str) -> list_to_binary(Str);
bin(Bin) when is_binary(Bin) -> Bin.

datetime() ->
    {{Y,M,D}, {H,MM,S}} = calendar:system_time_to_local_time(erlang:system_time(second), second),
    lists:flatten(io_lib:format(\"~4..0w-~2..0w-~2..0w ~2..0w:~2..0w:~2..0w\", [Y, M, D, H, MM, S])).
"


pipefile="`ps -ef | grep run_erl | grep -o -E '\-daemon (\S*)' | awk '{print $2}'`erlang.pipe.1.w"

echo ${VAR} > emqx_dump.erl
file="`pwd`/emqx_dump.erl"
echo "f().\n" > $pipefile
sleep 1
echo "compile:file(\"${file}\"), {ok, Dir} = file:get_cwd(), code:add_patha(Dir), code:load_file(emqx_dump).\n" > $pipefile
sleep 1

case "$1" in
    export)
        echo "$2"
        echo "emqx_dump:export(\"$2\")." > $pipefile

        rm -rf ${file}
        echo "The emqx data has been successfully exported to $2/emqx-export.json"
        ;;
    *)
    echo "Usage: export"
    exit 1
    ;;
esac